// don't edit this please, it was auto-generated by hsss
// https://github.com/slact/hsss

typedef struct {
  char *register_receive_handler;

  char *reply;

} ngx_ipc_lua_scripts_t;

ngx_ipc_lua_scripts_t ngx_ipc_lua_scripts = {
  //register_receive_handler
  "return function(ipc, run_timer_handler, add_hacktimer, get_last_alert_data)\n"
  "  local timer_handler\n"
  "  local meh = function() end\n"
  "  timer_handler = function(premature)\n"
  "    \n"
  "    local src_slot, src_pid, name, data = get_last_alert_data()\n"
  "    \n"
  "    if src_slot ~= nil then\n"
  "      ipc.sender = src_pid\n"
  "      local handler = ipc.handlers[name]\n"
  "      if handler then\n"
  "        run_timer_handler(handler, name, data, false)\n"
  "      elseif ipc.default_handler then\n"
  "        run_timer_handler(ipc.default_handler, name, data, true)\n"
  "      else\n"
  "        run_timer_handler(meh, name, data, true)\n"
  "      end\n"
  "    end\n"
  "    \n"
  "    ipc.sender = nil\n"
  "    \n"
  "    --add timer again and hack it\n"
  "    add_hacktimer(timer_handler)\n"
  "  end\n"
  "\n"
  "  local hacktimer_started = false\n"
  "  \n"
  "  local register_handler = function(name, handler, intable)\n"
  "    if type(name) ~= \"string\" then\n"
  "      \n"
  "      error(\"bad \".. (intable and \"table key in argument #1\" or \"argument #1\") .. \" to 'ngx.ipc.receive' (string expected, got \" .. type(name) .. \")\")\n"
  "    end\n"
  "    local handler_type = type(handler)\n"
  "    if handler_type ~= \"function\" and handler_type ~= \"nil\"  then\n"
  "      error(\"bad \" .. (intable and \"table value in argument #1\" or \"argument #2\") .. \" to 'ngx.ipc.receive' (function or nil expected, got \" .. type(name) .. \")\")\n"
  "    end\n"
  "    ipc.handlers[name]=handler\n"
  "  end\n"
  "  \n"
  "  return function(name, handler)\n"
  "    if type(name)~=\"table\" then\n"
  "      register_handler(name, handler, false)\n"
  "    else\n"
  "      if handler ~= nil then\n"
  "        error(\"bad argument #2 to 'ngx.ipc.receive' when argument #1 is table (nil expected, got \"..type(handler)..\")\")\n"
  "      end\n"
  "      for n, h in pairs(name) do\n"
  "        register_handler(n, h, true)\n"
  "      end\n"
  "    end\n"
  "    \n"
  "    if not hacktimer_started then\n"
  "      add_hacktimer(timer_handler)\n"
  "      hacktimer_started = true\n"
  "    end\n"
  "    \n"
  "    return true\n"
  "  end\n"
  "end\n",

  //reply
  "return function(ipc)\n"
  "  return function(name, data)\n"
  "    if not ipc.sender then\n"
  "      error(\"Can't reply, ngx.ipc.reply called outside of IPC alert handler.\")\n"
  "    end\n"
  "    return ipc.send(ipc.sender, name, data)\n"
  "  end  \n"
  "end\n"
};

